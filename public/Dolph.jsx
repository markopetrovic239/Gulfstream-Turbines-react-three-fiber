/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect, useMemo } from 'react'
import { useFrame } from 'react-three-fiber'
import { useGLTF } from '@react-three/drei/useGLTF'

import { useAnimations } from '@react-three/drei/useAnimations'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'


export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/dolphin2.glb') as GLTFResult
  //const copiedSkeleton = useMemo(() => nodes.Circle002.skeleton.clone(), [nodes])

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      'mixamo.com': mixer.clipAction(animations[0], group.current)
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
        {/*   <primitive object={nodes.MAIN} /> */}
          <group name="Mesh">
            <skinnedMesh
              name="Circle002"
              material={materials['Dolphin Body']}
              geometry={nodes.Circle002.geometry}
              skeleton={nodes.Circle002.skeleton}
            />
            <skinnedMesh
              name="Circle002_1"
              material={materials['Dolphin Eyes']}
              geometry={nodes.Circle002_1.geometry}
              skeleton={nodes.Circle002_1.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/dolphin2.glb')
