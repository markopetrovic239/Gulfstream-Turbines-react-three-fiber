/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect, useMemo } from 'react'
import { useFrame, useGraph, useLoader } from 'react-three-fiber'
import { useGLTF } from '@react-three/drei/useGLTF'
//import { useGraph } from '@react-three/drei/use'
import { useAnimations } from '@react-three/drei/useAnimations'
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    Circle002: THREE.SkinnedMesh
    Circle002_1: THREE.SkinnedMesh
    MAIN: THREE.Bone
  }
  materials: {
    ['Dolphin Body']: THREE.MeshStandardMaterial
    ['Dolphin Eyes']: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Action.001'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group= useRef<THREE.Group>()
// const { /* scene,nodes, materials, */ animations  } = useGLTF('dolphin2.glb') as GLTFResult
  //const { scene } = useLoader(GLTFLoader, 'dolphin2.gltf')
//  const { nodes, materials }:any = useGraph(scene)
//  const copiedScene = useMemo(() => scene.clone(), [scene])

  const [model, set] : any = useState()
 // const actions : any = useRef()
  useEffect(() =>void new GLTFLoader().load("/dolphin2.glb", set), [])


  //  const {ref, actions } = useAnimations(animations, group);

  useFrame(()=>{
    if(model){
    if(group.current.position.z <= 20){
      group.current.position.z += 0.01
      group.current.position.x += 0.01
      group.current.position.y += (Math.sin(2*Math.PI * Math.random())/100) 
       }
        else{
          group.current.position.z = props.position[2]
          group.current.position.x = props.position[0]
        }}
     });   

  useEffect(() => {
     // @ts-ignore
    //  if(model && group.current.animations){
        console.log(group) 
        
      //    group.current.animations[0].play();
        //model.animations[0].play()
      //actions["Action.001"].play();
      //actions["Action.001"].setDuration(4+Math.random());
    
      }) 
     // const { ref, actions } = useAnimations(animations);

  return  model ?  
   <group
    ref={group}  
    >
    <primitive 
    object={model.scene}  
    {...props}
    scale={[0.19, 0.19, 0.19]} 
    rotation={[0, Math.PI/4, 0]}  
    /> 
    </group>
  : null
}

useGLTF.preload('/dolphin2.gltf')
